void	find_letter(t_m *m)
{
	t_coord	*c;

	c = malloc(sizeof(t_coord));
	c->x = 0;
	c->y = 0;
	if (m->p == 1)
	{
		while (m->map[c->y][c->x] < m->size_y)
		{
			if (m->map[c->y][c->x] == 'O')
				try_incert(m);
			if (c->x == m->size_x) {
				c->y += 1;
				c->x = 0;
			}
			c->x++;
		}
	}
}



void ft_read(t_m *m, char *line)
{
	while (get_next_line(FD, &line) > 0)
	{
		if (m->map == NULL)
		{
			if (ft_strstr(line, "$$$"))
			{
				m->p = line[10] - 48;
				if (m->p == 2)
				{
					m->iam = 'X';
					m->enmy = 'O';
				}
			}
			if (ft_strstr(line, "Plat"))
				ind_map_size(m, line);
		}
		if (ft_strstr(line, "Plat"))
			fill_map(m, line);
		if (ft_strstr(line, "Pie"))
		{
			ind_piece_size(m, line);
			fill_piece(m, line);
		}
	}
}


void	read_map(t_m *m, char *line)
{
	if (m->map == NULL)
	{
		if (ft_strstr(line, "$$$"))
		{
			m->p = line[10] - 48;
			if (m->p == 2)
			{
				m->iam = 'X';
				m->enmy = 'O';
			}
			get_next_line(FD, &line);
			fprintf(m->f, "%s\n", line);
		}
		if (ft_strstr(line, "Plat"))
			ind_map_size(m, line);
	}
}





//		printf("Summ---> %d\n", new);
/*
		if (new <= m->sum && m->p == 1)
		{
			m->sum = new;
			m->pos.x = x;
			m->pos.y = y;
//			printf("\n");
//			printf("\n");
//			for (int i = 0; i < m->size_y; i++) {
//					for (int j = 0; j < m->size_x; j++) {
//						printf(" %3d ", m->i_map[i][j]);
//
//					}
//					printf("\n");
//				}

			FILE*  fd;
			fd = fopen("curent.txt", "a");
			fprintf(fd,"%d y - %d x - %d\n", new, y , x);
			fclose(fd);

		}
}